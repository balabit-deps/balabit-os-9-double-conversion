libdouble-conversion.so.3 libdouble-conversion3 #MINVER#
* Build-Depends-Package: libdouble-conversion-dev
 (c++)"double double_conversion::StringToDoubleConverter::StringTo<double>(char const*, int, int*) const@Base" 3.1.7
 (c++)"double double_conversion::StringToDoubleConverter::StringTo<double>(unsigned short const*, int, int*) const@Base" 3.1.7
 (c++)"double double_conversion::StringToDoubleConverter::StringToIeee<char const*>(char const*, int, bool, int*) const@Base" 2.0.0
 (c++)"double double_conversion::StringToDoubleConverter::StringToIeee<unsigned short const*>(unsigned short const*, int, bool, int*) const@Base" 2.0.0
 (c++)"double_conversion::Bignum::AddBignum(double_conversion::Bignum const&)@Base" 2.0.0
 (c++)"double_conversion::Bignum::Align(double_conversion::Bignum const&)@Base" 2.0.0
 (c++)"double_conversion::Bignum::AssignBignum(double_conversion::Bignum const&)@Base" 2.0.0
 (c++)"double_conversion::Bignum::AssignDecimalString(double_conversion::Vector<char const>)@Base" 2.0.0
 (c++)"double_conversion::Bignum::AssignHexString(double_conversion::Vector<char const>)@Base" 2.0.0
 (c++)"double_conversion::Bignum::AssignPowerUInt16(unsigned short, int)@Base" 2.0.0
 (c++)"double_conversion::Bignum::AssignUInt16(unsigned short)@Base" 2.0.0
 (c++)"double_conversion::Bignum::BigitOrZero(int) const@Base" 3.1.7
 (c++)"double_conversion::Bignum::BigitsShiftLeft(int)@Base" 2.0.0
 (c++)"double_conversion::Bignum::Clamp()@Base" 2.0.0
 (c++)"double_conversion::Bignum::Compare(double_conversion::Bignum const&, double_conversion::Bignum const&)@Base" 2.0.0
 (c++)"double_conversion::Bignum::DivideModuloIntBignum(double_conversion::Bignum const&)@Base" 2.0.0
 (c++)"double_conversion::Bignum::MultiplyByPowerOfTen(int)@Base" 2.0.0
 (c++)"double_conversion::Bignum::MultiplyByUInt32(unsigned int)@Base" 2.0.0
 (c++)"double_conversion::Bignum::PlusCompare(double_conversion::Bignum const&, double_conversion::Bignum const&, double_conversion::Bignum const&)@Base" 2.0.0
 (c++)"double_conversion::Bignum::RawBigit(int) const@Base" 3.1.7
 (c++)"double_conversion::Bignum::RawBigit(int)@Base" 3.1.7
 (c++)"double_conversion::Bignum::ShiftLeft(int)@Base" 2.0.0
 (c++)"double_conversion::Bignum::Square()@Base" 2.0.0
 (c++)"double_conversion::Bignum::SubtractBignum(double_conversion::Bignum const&)@Base" 2.0.0
 (c++)"double_conversion::Bignum::SubtractTimes(double_conversion::Bignum const&, int)@Base" 2.0.0
 (c++)"double_conversion::Bignum::ToHexString(char*, int) const@Base" 2.0.0
 (c++)"double_conversion::BignumDtoa(double, double_conversion::BignumDtoaMode, int, double_conversion::Vector<char>, int*, int*)@Base" 2.0.0
 (c++)"double_conversion::DoubleToStringConverter::CreateDecimalRepresentation(char const*, int, int, int, double_conversion::StringBuilder*) const@Base" 2.0.0
 (c++)"double_conversion::DoubleToStringConverter::CreateExponentialRepresentation(char const*, int, int, double_conversion::StringBuilder*) const@Base" 2.0.0
 (c++)"double_conversion::DoubleToStringConverter::DoubleToAscii(double, double_conversion::DoubleToStringConverter::DtoaMode, int, char*, int, bool*, int*, int*)@Base" 2.0.0
 (c++)"double_conversion::DoubleToStringConverter::EcmaScriptConverter()@Base" 2.0.0
 (c++)"double_conversion::DoubleToStringConverter::HandleSpecialValues(double, double_conversion::StringBuilder*) const@Base" 2.0.0
 (c++)"double_conversion::DoubleToStringConverter::ToExponential(double, int, double_conversion::StringBuilder*) const@Base" 2.0.0
 (c++)"double_conversion::DoubleToStringConverter::ToFixed(double, int, double_conversion::StringBuilder*) const@Base" 2.0.0
 (c++)"double_conversion::DoubleToStringConverter::ToPrecision(double, int, double_conversion::StringBuilder*) const@Base" 2.0.0
 (c++)"double_conversion::DoubleToStringConverter::ToShortestIeeeNumber(double, double_conversion::StringBuilder*, double_conversion::DoubleToStringConverter::DtoaMode) const@Base" 2.0.0
 (c++)"double_conversion::FastDtoa(double, double_conversion::FastDtoaMode, int, double_conversion::Vector<char>, int*, int*)@Base" 2.0.0
 (c++)"double_conversion::FastFixedDtoa(double, int, double_conversion::Vector<char>, int*, int*)@Base" 2.0.0
 (c++)"double_conversion::PowersOfTenCache::GetCachedPowerForBinaryExponentRange(int, int, double_conversion::DiyFp*, int*)@Base" 2.0.0
 (c++)"double_conversion::PowersOfTenCache::GetCachedPowerForDecimalExponent(int, double_conversion::DiyFp*, int*)@Base" 2.0.0
 (c++)"double_conversion::StringToDoubleConverter::StringToDouble(char const*, int, int*) const@Base" 2.0.0
 (c++)"double_conversion::StringToDoubleConverter::StringToDouble(unsigned short const*, int, int*) const@Base" 2.0.0
 (c++)"double_conversion::StringToDoubleConverter::StringToFloat(char const*, int, int*) const@Base" 2.0.0
 (c++)"double_conversion::StringToDoubleConverter::StringToFloat(unsigned short const*, int, int*) const@Base" 2.0.0
 (c++)"double_conversion::Strtod(double_conversion::Vector<char const>, int)@Base" 2.0.0
 (c++)"double_conversion::StrtodTrimmed(double_conversion::Vector<char const>, int)@Base" 3.1.7
 (c++)"double_conversion::Strtof(double_conversion::Vector<char const>, int)@Base" 2.0.0
 (c++)"double_conversion::StrtofTrimmed(double_conversion::Vector<char const>, int)@Base" 3.1.7
 (c++)"float double_conversion::StringToDoubleConverter::StringTo<float>(char const*, int, int*) const@Base" 3.1.7
 (c++)"float double_conversion::StringToDoubleConverter::StringTo<float>(unsigned short const*, int, int*) const@Base" 3.1.7
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 mips64el ppc64 ppc64el s390x sparc64)"double_conversion::Bignum::AddUInt64(unsigned long)@Base" 2.0.0
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 mips64el ppc64 ppc64el s390x sparc64)"double_conversion::Bignum::AssignUInt64(unsigned long)@Base" 2.0.0
 (c++|arch=alpha amd64 arm64 kfreebsd-amd64 mips64el ppc64 ppc64el s390x sparc64)"double_conversion::Bignum::MultiplyByUInt64(unsigned long)@Base" 2.0.0
 (c++|arch=armel armhf hppa any-i386 m68k mips mipsel powerpc powerpcse sh4 sparc x32)"double_conversion::Bignum::AddUInt64(unsigned long long)@Base" 2.0.0
 (c++|arch=armel armhf hppa any-i386 m68k mips mipsel powerpc powerpcse sh4 sparc x32)"double_conversion::Bignum::AssignUInt64(unsigned long long)@Base" 2.0.0
 (c++|arch=armel armhf hppa any-i386 m68k mips mipsel powerpc powerpcse sh4 sparc x32)"double_conversion::Bignum::MultiplyByUInt64(unsigned long long)@Base" 2.0.0
